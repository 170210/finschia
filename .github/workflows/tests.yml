name: Tests / Code Coverage
#  Tests / Code Coverage workflow runs unit tests and uploads a code coverage report
#  This workflow is run on pushes to master & every Pull Requests where a .go, .mod, .sum have been changed
on: push

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"

  install-tparse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Display go version
        run: go version
      - name: install tparse
        run: |
          export GO111MODULE="on" && go install github.com/mfridman/tparse@v0.8.3
      - uses: actions/cache@v3.3.1
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tparse-binary
  
  check-diffs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get diff
        id: getDiff
        uses: technote-space/get-diff-action@v6.1.2
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
            .github/workflows/test.yml

  build:
    needs: check-diffs
    runs-on: ubuntu-latest
#    if: ${{ needs.check-diffs.output.diff }}
    strategy:
      matrix:
        go-arch: ["amd64"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Build
        run: GOARCH=${{ matrix.go-arch }} LEDGER_ENABLED=false make build
      - name: debug
        run: ls -al
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: fnsad
          path: ./build/fnsad

  split-test-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Create a file with all the pkgs
        run: go list ./... > pkgs.txt
      - name: Split pkgs into 4 files
        run: split -d -n l/4 pkgs.txt pkgs.txt.part.
      # cache multiple
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-00"
          path: ./pkgs.txt.part.00
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-01"
          path: ./pkgs.txt.part.01
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-02"
          path: ./pkgs.txt.part.02
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-03"
          path: ./pkgs.txt.part.03

  tests:
    runs-on: ubuntu-latest
    needs: [split-test-files,check-diffs]
    if: ${{ needs.check-diffs.output.diff }}
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - uses: technote-space/get-diff-action@v6.1.2
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
            .github/workflows/test.yml
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}"
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential libtool autoconf automake
      - name: install libsodium
        run: |
          make libsodium
      - name: test & coverage report creation
        env:
          CGO_CFLAGS: "-I${{ github.workspace }}/tools/sodium/linux_amd64/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/tools/sodium/linux_amd64/lib -lsodium"
        run: |
          cat pkgs.txt.part.${{ matrix.part }} | xargs go test -mod=readonly -timeout 30m -coverprofile=${{ matrix.part }}profile.out -covermode=atomic -tags='ledger test_ledger_mock goleveldb gcc libsodium'
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-coverage"
          path: ./${{ matrix.part }}profile.out

  upload-coverage-report:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.1.2
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
            .github/workflows/test.yml
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-00-coverage"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-01-coverage"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-02-coverage"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-03-coverage"
      - run: |
          cat ./*profile.out | grep -v "mode: atomic" >> coverage.txt
      - name: filter out DONTCOVER
        run: |
          excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
          excludelist+=" $(find ./ -type f -name '*.pb.go')"
          excludelist+=" $(find ./ -type f -name '*.pb.gw.go')"
          excludelist+=" $(find ./ -type f -path './tests/mocks/*.go')"
          for filename in ${excludelist}; do
            filename=$(echo $filename | sed 's/^./github.com\/Finschia\/finschia/g')
            echo "Excluding ${filename} from coverage report..."
            sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
          done
      - uses: codecov/codecov-action@v3.1.4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt

  test-integration:
    runs-on: ubuntu-latest
    needs: [split-test-files, check-diffs]
    if: ${{ needs.check-diffs.output.diff }}
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}"
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential libtool autoconf automake
      - name: install libsodium
        run: |
          make libsodium
      - name: test & coverage report creation
        env:
          CGO_CFLAGS: "-I${{ github.workspace }}/tools/sodium/linux_amd64/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/tools/sodium/linux_amd64/lib -lsodium"
        run: |
          xargs --arg-file=pkgs.txt.part.${{ matrix.part }} go test -mod=readonly -json -timeout 30m -tags='cli_test goleveldb gcc libsodium' | tee ${{ matrix.part }}-integration-output.txt
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-integration-output"
          path: ./${{ matrix.part }}-integration-output.txt

  test-integration-report:
    runs-on: ubuntu-latest
    needs: [test-integration, install-tparse]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.1.2
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
            .github/workflows/test.yml
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-00-integration-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-01-integration-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-02-integration-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-03-integration-output"
      - uses: actions/cache@v3.3.1
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tparse-binary
      - name: Generate integration test report
        run: cat ./*-integration-output.txt | ~/go/bin/tparse

  test-integration-multi-node:
    runs-on: ubuntu-latest
    needs: [split-test-files,check-diffs]
    if: ${{ needs.check-diffs.output.diff }}
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}"
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential libtool autoconf automake
      - name: install libsodium
        run: make libsodium
      - name: test report creation
        env:
          CGO_CFLAGS: "-I${{ github.workspace }}/tools/sodium/linux_amd64/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/tools/sodium/linux_amd64/lib -lsodium"
        run: |
          xargs --arg-file=pkgs.txt.part.${{ matrix.part }} go test -mod=readonly -json -timeout 30m -tags='cli_multi_node_test goleveldb libsodium' | tee ${{ matrix.part }}-integration-multi-node-output.txt
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-integration-multi-node-output"
          path: ./${{ matrix.part }}-integration-multi-node-output.txt

  test_integration_multi_node_report:
    runs-on: ubuntu-latest
    needs: [test-integration-multi-node, install-tparse]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.1.2
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
            .github/workflows/test.yml
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-00-integration-multi-node-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-01-integration-multi-node-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-02-integration-multi-node-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-03-integration-multi-node-output"
      - uses: actions/cache@v3.3.1
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tparse-binary
      - name: Generate multi node integration test report
        run: cat ./*-integration-multi-node-output.txt | ~/go/bin/tparse

  test-localnet-blocks:
    runs-on: ubuntu-latest
    needs: [build, tests]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Install docker-compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      - name: Start localnet
        run: |
          make localnet-start
      - name: Test blocks
        id: test-blocks
        continue-on-error: true
        run: ./networks/localnet-blocks-test.sh 40 5 10 localhost
      - name: Stop localnet
        run: |
          make localnet-stop
          if [ ${{ steps.test-blocks.outcome }} == 'failure' ] ; then
            exit 1
          fi
  
  tests-smart-contract-on-local-node:
#  if: env.GIT_DIFF
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Download smart contracts
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'Finschia/cosmwasm'
          version: 'latest'
          regex: true
          file: '.*'
          target: 'contracts/'
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: fnsad
          path: ./build
      - name: debug
        run: ls -al
      - name: build install
        run: build install
      - name: set configure file
        run: sh init_single.sh
      - name: start local node
        run: |
          ./fnsad start &
          sleep 300
          kill $!
      - name: test
        run: echo "hello"